<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	you under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="IRIS" default="choose-products">
	<!-- this build file is a self contained project: it doesn't require anything 
		else that ant 1.6.2 or greater and java 1.4 or greater properly installed. 
		It is used to showcase how easy and straightforward it can be to use Ivy. 
		This is not an example of the best pratice to use in a project, especially 
		for the java source code "generation" :-) (see generate-src target) To run 
		copy this file in an empty directory, open a shell or a command window in 
		this directory and run "ant". It will download ivy and then use it to resolve 
		the dependency of the class which is itself "contained" in this build script. 
		After a successful build run "ant" again and you will see the build will 
		be much faster. More information can be found at http://ant.apache.org/ivy/ -->
	<!-- here is the version of ivy we will use. change this property to try 
		a newer version if you want -->
	<property name="ivy.install.version" value="2.4.0" />
	<property name="ivy.jar.dir" value="${basedir}/ivy" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
	<property name="ivy.pattern" value="${ivy.jar.dir}/[artifact]-[revision].[ext]" />

	<property name="libs.dir" value="libs" />
	<property name="libs.pattern" value="${libs.dir}/[artifact]-[revision].[ext]" />

	<property name="build.dir" value="build" />
	<property name="src.dir" value="src" />
	<property name="target.dir" value="target" />
	<property name="modules.dir" value="mlib" />

	<property name="java.home" value="/usr/lib/jvm/java-9-oracle" />
	<property name="JAVA_BIN" value="${java.home}/bin" />

	<property name="iris.version" value="1.0" />
	<property name="java.mail.version" value="1.5.5" />
	<property name="lucene.version" value="4.10.2" />
	<property name="sqlite.version" value="3.8.11.2" />

	<!-- ================================= CLEAN ================================= -->
	<target name="clean" description="--> clean the project">
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${build.dir}" />
			<fileset dir="${target.dir}" />
			<fileset dir="${modules.dir}" />
		</delete>
		<mkdir dir="${build.dir}" />
		<mkdir dir="${modules.dir}" />
	</target>
	<target name="clean-ivy" description="--> clean the ivy installation">
		<delete dir="${ivy.jar.dir}" />
	</target>
	<target name="clean-cache" depends="_install-ivy" description="--> clean the ivy cache">
		<ivy:cleancache />
	</target>
	<target name="clean-all" depends="clean, clean-ivy, clean-cache" description="--> full clean">
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${libs.dir}" />
		</delete>
	</target>


	<!-- ================================= IRIS ================================= -->
	<target name="choose-products" description="Choose the product to be generated" depends="clean,_iris_basic_modules">
		<echo>Choose the product ...</echo>

		<input message="What is the mail type (simple/secure)?" validargs="simple,secure" addproperty="email.type" />
		<!-- TODO: adapt when we have the secure mail -->
		<antcall target="_create_module">
			<param name="module.name" value="iris.mail.simple" />
		</antcall>
		<!-- TODO: select email providers -->
		<antcall target="_create_modules">
			<param name="list" value="iris.mail.provider.gmail,iris.mail.provider.outlook,iris.mail.provider.yahoo" />
		</antcall>

		<input message="What is the persistence type (xml/relational/lucene)?" validargs="xml,relational,lucene" addproperty="db.type" />
		<antcall target="_create_persistence_module">
			<param name="db.type" value="${db.type}" />
		</antcall>

		<input message="What is the interface type (cli,gui)?" validargs="cli,gui" addproperty="interface.type" />
		<antcall target="_create_interface_module">
			<param name="interface.type" value="${interface.type}" />
		</antcall>
	</target>


	<target name="run" depends="_iris_basic_modules">

	</target>

	<target name="_iris_basic_modules" depends="_download-iris-basic-dependencies">
		<antcall target="_create_modules">
			<param name="list" value="iris.model,iris.base,iris.mail,iris.mail.provider,iris.persistence,iris.core" />
		</antcall>
	</target>



	<target name="_create_interface_module">
		<switch value="${interface.type}">
			<case value="gui">
				<mkdir dir="${build.dir}/iris.ui.gui/images" />
				<copy todir="${build.dir}/iris.ui.gui/images">
					<fileset dir="${src.dir}/iris.ui.gui/images" />
				</copy>
				<antcall target="_create_module">
					<param name="module.name" value="iris.ui.gui" />
				</antcall>
			</case>
			<default>
				<antcall target="_create_module">
					<param name="module.name" value="iris.ui.cli" />
				</antcall>
			</default>
		</switch>
	</target>
	<target name="_create_persistence_module">
		<switch value="${db.type}">
			<case value="relational">
				<antcall target="_download-sqlite" />
				<antcall target="_create_modules">
					<param name="list" value="iris.model.simple,iris.persistence.jdbc" />
				</antcall>
			</case>
			<case value="lucene">
				<antcall target="_download-lucene" />
				<antcall target="_create_modules">
					<param name="list" value="iris.model.simple,iris.persistence.lucene" />
				</antcall>
			</case>
			<default>
				<antcall target="_create_module">
					<param name="module.name" value="iris.persistence.xml" />
				</antcall>
			</default>
		</switch>
	</target>

	<target name="_create_modules">
		<foreach list="${list}" param="module.name" target="_create_module" />
	</target>
	<target name="_create_module">
		<echo>Creating Module: ${module.name}</echo>
		<antcall target="_compile_module">
			<param name="module.name" value="${module.name}" />
		</antcall>
		<antcall target="_create_jar">
			<param name="module.name" value="${module.name}" />
		</antcall>
	</target>
	<target name="_compile_module">
		<fileset dir="${src.dir}/${module.name}" id="fileset" casesensitive="yes">
			<include name="**/*.java" />
		</fileset>
		<pathconvert refid="fileset" property="converted" pathsep=" " />
		<exec executable="${JAVA_BIN}/javac">
			<env key="JAVA_HOME" value="${java.home}" />
			<arg value="-mp" />
			<arg value="${modules.dir}:${libs.dir}" />
			<arg value="-d" />
			<arg value="${build.dir}/${module.name}" />
			<arg value="-sourcepath" />
			<arg value="${src.dir}/${module.name}" />
			<arg line="${converted}" />
		</exec>
	</target>
	<target name="_create_jar">
		<exec executable="${JAVA_BIN}/jar">
			<env key="JAVA_HOME" value="${java.home}" />
			<arg value="--create" />
			<arg value="--file" />
			<arg value="${modules.dir}/${module.name}@${iris.version}.jar" />
			<arg value="--module-version" />
			<arg value="${iris.version}" />
			<arg value="-C" />
			<arg line="${build.dir}/${module.name}" />
			<arg line="." />
		</exec>
	</target>


	<target name="_download-lucene" depends="_install-ivy" unless="skip.download">
		<ivy:retrieve pattern="${libs.pattern}">
			<dependency org="org.apache.lucene" name="lucene-core" rev="${lucene.version}" />
			<dependency org="org.apache.lucene" name="lucene-analyzers-common" rev="${lucene.version}" />
			<dependency org="org.apache.lucene" name="lucene-queryparser" rev="${lucene.version}" />
			<dependency org="org.apache.lucene" name="lucene-codecs" rev="${lucene.version}" />
			<!-- TODO: prevent to download javadocs and sources -->
		</ivy:retrieve>
	</target>
	<target name="_download-sqlite" depends="_install-ivy" unless="skip.download">
		<ivy:retrieve pattern="${libs.pattern}">
			<dependency org="org.xerial" name="sqlite-jdbc" rev="${sqlite.version}" />
			<exclude org="junit" module="junit" />
		</ivy:retrieve>
	</target>
	<target name="_download-iris-basic-dependencies" depends="_install-ant-contrib" unless="skip.download">
		<ivy:retrieve pattern="${libs.pattern}">
			<dependency org="javax.mail" name="javax.mail-api" rev="${java.mail.version}" />
			<dependency org="com.sun.mail" name="javax.mail" rev="${java.mail.version}" />
			<exclude org="junit" module="junit" />
		</ivy:retrieve>
	</target>

	<target name="_install-ant-contrib" depends="_install-ivy" unless="skip.download">
		<ivy:retrieve organisation="ant-contrib" module="ant-contrib" revision="20020829" inline="true" pattern="${ivy.pattern}" />
		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
			<classpath>
				<pathelement location="${ivy.jar.dir}/ant-contrib-20020829.jar" />
			</classpath>
		</taskdef>
	</target>


	<!-- ================================= IVY ================================= -->
	<target name="_download-ivy" unless="skip.download">
		<mkdir dir="${ivy.jar.dir}" />
		<!-- download Ivy from web site so that it can be used even without any 
			special installation -->
		<echo message="installing ivy..." />
		<get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" />
	</target>
	<!-- ================================= target: install-ivy this target is 
		not necessary if you put ivy.jar in your ant lib directory if you already 
		have ivy in your ant lib, you can simply remove this target and the dependency 
		the 'go' target has on it ================================= -->
	<target name="_install-ivy" depends="_download-ivy">
		<!-- try to load ivy here from local ivy dir, in case the user has not 
			already dropped it into ant's lib dir (note that the latter copy will always 
			take precedence). We will not fail as long as local lib dir exists (it may 
			be empty) and ivy is in at least one of ant's lib dir or the local lib dir. -->
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<target name="teste" depends="_install-ivy">
		<!-- <ivy:cachepath organisation="ant-contrib" module="ant-contrib" conf="ant" 
			revision="20020829" pathid="ant-contrib.path.id" inline="true" /> <taskdef 
			resource="net/sf/antcontrib/antlib.xml" classpathref="ant-contrib.path.id" 
			/> <echo message="The first five letters of the alphabet are:" /> <for list="a,b,c,d,e" 
			param="letter"> <sequential> <echo>Letter @{letter}</echo> </sequential> 
			</for> -->

		<!-- http://ant.apache.org/ivy/history/2.2.0/use/retrieve.html 
		http://ant.apache.org/ivy/history/latest-milestone/use/resolve.html
		-->
		<!-- 
		<ivy:retrieve organisation="javax.mail" module="javax.mail-api" revision="1.5.5" inline="true" pattern="${ivy.jar.dir}/[artifact]-[revision].[ext]" />
		<ivy:retrieve organisation="com.sun.mail" module="javax.mail" revision="1.5.5" conf="compile" inline="true" />
		TODO arrumar ... trazendo dependencias de test 
		<ivy:retrieve organisation="org.xerial" module="sqlite-jdbc" revision="3.8.11.2" inline="true" pattern="${ivy.jar.dir}/[artifact]-[revision].[ext]" />
-->

		<ivy:retrieve pattern="${ivy.jar.dir}/[artifact]-[revision].[ext]">
			<dependency org="javax.mail" name="javax.mail-api" rev="1.5.5" />
			<dependency org="com.sun.mail" name="javax.mail" rev="1.5.5" />
			<exclude org="junit" module="junit" />
		</ivy:retrieve>


		<ivy:retrieve organisation="ant-contrib" module="ant-contrib" revision="20020829" inline="true" pattern="${ivy.jar.dir}/[artifact]-[revision].[ext]" />
		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
			<classpath>
				<pathelement location="${ivy.jar.dir}/ant-contrib-20020829.jar" />
			</classpath>
		</taskdef>
		<foreach list="a,b,c,d,e" param="letter" target="novo" />

	</target>

	<target name="novo">
		<echo>Letter ${letter}</echo>
	</target>

	<target name="_tmp">
		<echo>Letter ${letter}</echo>
	</target>



</project>